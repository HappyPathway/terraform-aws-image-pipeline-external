name: "Terraform Test"

on:
  workflow_dispatch:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.5.0"
          
      - name: Run Tests by Test Case
        run: |
          TEST_CASES=("basic_resource_creation" "bucket_configurations" "vpc_endpoint_creation" "security_group_rules" "custom_tags")
          
          for test_case in "${TEST_CASES[@]}"; do
            echo "Running test case: $test_case"
            
            # Create test-specific directory
            mkdir -p "tf-${test_case}"
            cp -r * "tf-${test_case}/" 2>/dev/null || true
            
            # Switch to test directory and run test
            cd "tf-${test_case}"
            terraform init -upgrade
            terraform test -test-directory="tests" -filter="$test_case" -coverage="${test_case}_coverage.out" || exit 1
            cd ..
            
            # Clean up test directory except coverage file
            mv "tf-${test_case}/${test_case}_coverage.out" .
            rm -rf "tf-${test_case}"
          done
        env:
          TF_SKIP_PROVIDER_VERIFY: "true"

      - name: Upload Test Coverage
        uses: actions/upload-artifact@v4
        with:
          name: test-coverage
          path: "*_coverage.out"
          retention-days: 14

  aggregate-results:
    needs: [test]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Download Coverage Reports
        uses: actions/download-artifact@v4
        with:
          name: test-coverage
          path: coverage-reports

      - name: Display Structure of Coverage Reports
        run: ls -R coverage-reports

      - name: Aggregate Coverage Reports
        run: |
          echo "# Test Coverage Summary" > coverage_summary.md
          echo "## Individual Test Results" >> coverage_summary.md
          
          total_resources=0
          covered_resources=0
          
          for report in coverage-reports/*_coverage.out; do
            test_case=$(basename $report | sed 's/_coverage.out//')
            echo "### $test_case" >> coverage_summary.md
            cat $report >> coverage_summary.md
            
            while IFS= read -r line; do
              if [[ $line =~ ([0-9]+)/([0-9]+)[[:space:]]resources[[:space:]]covered ]]; then
                covered_resources=$((covered_resources + ${BASH_REMATCH[1]}))
                total_resources=$((total_resources + ${BASH_REMATCH[2]}))
              fi
            done < "$report"
            
            echo -e "\n---\n" >> coverage_summary.md
          done
          
          coverage=$(( (covered_resources * 100) / total_resources ))
          echo "{\"coverage\": ${coverage}}" > coverage-badge.json
          
          echo -e "\n## Total Coverage" >> coverage_summary.md
          echo "${coverage}% (${covered_resources}/${total_resources} resources)" >> coverage_summary.md

      - name: Upload Summary
        uses: actions/upload-artifact@v4
        with:
          name: test-coverage-summary
          path: coverage_summary.md
          retention-days: 14

      - name: Upload Badge Data
        uses: actions/upload-artifact@v4
        with:
          name: coverage-badge
          path: coverage-badge.json
          retention-days: 14

      - name: Commit Coverage Badge
        if: github.ref == 'refs/heads/main'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add coverage-badge.json
          git commit -m "Update coverage badge [skip ci]" || echo "No changes to commit"
          git push